import { Injectable } from '@angular/core';
import { forkJoin, of, throwError, TimeoutError, timer } from 'rxjs';
import { map, mergeMap, retryWhen, switchMap, take, timeout } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../utils/flowHelper/flow-helper.service";
import * as i2 from "../flows/flows-data.service";
import * as i3 from "../logging/logger.service";
import * as i4 from "../iframe/silent-renew.service";
import * as i5 from "../auth-state/auth-state.service";
import * as i6 from "../config/auth-well-known/auth-well-known.service";
import * as i7 from "../iframe/refresh-session-iframe.service";
import * as i8 from "../storage/storage-persistence.service";
import * as i9 from "./refresh-session-refresh-token.service";
import * as i10 from "../user-data/user.service";
export const MAX_RETRY_ATTEMPTS = 3;
export class RefreshSessionService {
    constructor(flowHelper, flowsDataService, loggerService, silentRenewService, authStateService, authWellKnownService, refreshSessionIframeService, storagePersistenceService, refreshSessionRefreshTokenService, userService) {
        this.flowHelper = flowHelper;
        this.flowsDataService = flowsDataService;
        this.loggerService = loggerService;
        this.silentRenewService = silentRenewService;
        this.authStateService = authStateService;
        this.authWellKnownService = authWellKnownService;
        this.refreshSessionIframeService = refreshSessionIframeService;
        this.storagePersistenceService = storagePersistenceService;
        this.refreshSessionRefreshTokenService = refreshSessionRefreshTokenService;
        this.userService = userService;
    }
    userForceRefreshSession(config, allConfigs, extraCustomParams) {
        this.persistCustomParams(extraCustomParams, config);
        return this.forceRefreshSession(config, allConfigs, extraCustomParams);
    }
    forceRefreshSession(config, allConfigs, extraCustomParams) {
        const { customParamsRefreshTokenRequest, configId } = config;
        const mergedParams = { ...customParamsRefreshTokenRequest, ...extraCustomParams };
        if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {
            return this.startRefreshSession(config, allConfigs, mergedParams).pipe(map(() => {
                const isAuthenticated = this.authStateService.areAuthStorageTokensValid(config);
                if (isAuthenticated) {
                    return {
                        idToken: this.authStateService.getIdToken(config),
                        accessToken: this.authStateService.getAccessToken(config),
                        userData: this.userService.getUserDataFromStore(config),
                        isAuthenticated,
                        configId,
                    };
                }
                return null;
            }));
        }
        const { silentRenewTimeoutInSeconds } = config;
        const timeOutTime = silentRenewTimeoutInSeconds * 1000;
        return forkJoin([
            this.startRefreshSession(config, allConfigs, extraCustomParams),
            this.silentRenewService.refreshSessionWithIFrameCompleted$.pipe(take(1)),
        ]).pipe(timeout(timeOutTime), retryWhen(this.timeoutRetryStrategy.bind(this)), map(([_, callbackContext]) => {
            const isAuthenticated = this.authStateService.areAuthStorageTokensValid(config);
            if (isAuthenticated) {
                return {
                    idToken: callbackContext?.authResult?.id_token,
                    accessToken: callbackContext?.authResult?.access_token,
                    userData: this.userService.getUserDataFromStore(config),
                    isAuthenticated,
                    configId,
                };
            }
            return null;
        }));
    }
    persistCustomParams(extraCustomParams, config) {
        const { useRefreshToken } = config;
        if (extraCustomParams) {
            if (useRefreshToken) {
                this.storagePersistenceService.write('storageCustomParamsRefresh', extraCustomParams, config);
            }
            else {
                this.storagePersistenceService.write('storageCustomParamsAuthRequest', extraCustomParams, config);
            }
        }
    }
    startRefreshSession(config, allConfigs, extraCustomParams) {
        const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning(config);
        this.loggerService.logDebug(config, `Checking: silentRenewRunning: ${isSilentRenewRunning}`);
        const shouldBeExecuted = !isSilentRenewRunning;
        if (!shouldBeExecuted) {
            return of(null);
        }
        return this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(config).pipe(switchMap(() => {
            this.flowsDataService.setSilentRenewRunning(config);
            if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {
                // Refresh Session using Refresh tokens
                return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(config, allConfigs, extraCustomParams);
            }
            return this.refreshSessionIframeService.refreshSessionWithIframe(config, allConfigs, extraCustomParams);
        }));
    }
    timeoutRetryStrategy(errorAttempts, config) {
        return errorAttempts.pipe(mergeMap((error, index) => {
            const scalingDuration = 1000;
            const currentAttempt = index + 1;
            if (!(error instanceof TimeoutError) || currentAttempt > MAX_RETRY_ATTEMPTS) {
                return throwError(() => new Error(error));
            }
            this.loggerService.logDebug(config, `forceRefreshSession timeout. Attempt #${currentAttempt}`);
            this.flowsDataService.resetSilentRenewRunning(config);
            return timer(currentAttempt * scalingDuration);
        }));
    }
}
RefreshSessionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: RefreshSessionService, deps: [{ token: i1.FlowHelper }, { token: i2.FlowsDataService }, { token: i3.LoggerService }, { token: i4.SilentRenewService }, { token: i5.AuthStateService }, { token: i6.AuthWellKnownService }, { token: i7.RefreshSessionIframeService }, { token: i8.StoragePersistenceService }, { token: i9.RefreshSessionRefreshTokenService }, { token: i10.UserService }], target: i0.ɵɵFactoryTarget.Injectable });
RefreshSessionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: RefreshSessionService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: RefreshSessionService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.FlowHelper }, { type: i2.FlowsDataService }, { type: i3.LoggerService }, { type: i4.SilentRenewService }, { type: i5.AuthStateService }, { type: i6.AuthWellKnownService }, { type: i7.RefreshSessionIframeService }, { type: i8.StoragePersistenceService }, { type: i9.RefreshSessionRefreshTokenService }, { type: i10.UserService }]; } });
//# sourceMappingURL=data:application/json;base64,
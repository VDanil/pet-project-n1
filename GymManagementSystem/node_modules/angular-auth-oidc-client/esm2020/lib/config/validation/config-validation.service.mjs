import { Injectable } from '@angular/core';
import { allRules } from './rules';
import { allMultipleConfigRules } from './rules/index';
import * as i0 from "@angular/core";
import * as i1 from "../../logging/logger.service";
export class ConfigValidationService {
    constructor(loggerService) {
        this.loggerService = loggerService;
    }
    validateConfigs(passedConfigs) {
        return this.validateConfigsInternal(passedConfigs ?? [], allMultipleConfigRules);
    }
    validateConfig(passedConfig) {
        return this.validateConfigInternal(passedConfig, allRules);
    }
    validateConfigsInternal(passedConfigs, allRulesToUse) {
        const allValidationResults = allRulesToUse.map((rule) => rule(passedConfigs));
        let overallErrorCount = 0;
        passedConfigs.forEach((passedConfig) => {
            const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig);
            overallErrorCount += errorCount;
        });
        return overallErrorCount === 0;
    }
    validateConfigInternal(passedConfig, allRulesToUse) {
        const allValidationResults = allRulesToUse.map((rule) => rule(passedConfig));
        const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig);
        return errorCount === 0;
    }
    processValidationResultsAndGetErrorCount(allValidationResults, config) {
        const allMessages = allValidationResults.filter((x) => x.messages.length > 0);
        const allErrorMessages = this.getAllMessagesOfType('error', allMessages);
        const allWarnings = this.getAllMessagesOfType('warning', allMessages);
        allErrorMessages.forEach((message) => this.loggerService.logError(config, message));
        allWarnings.forEach((message) => this.loggerService.logWarning(config, message));
        return allErrorMessages.length;
    }
    getAllMessagesOfType(type, results) {
        const allMessages = results.filter((x) => x.level === type).map((result) => result.messages);
        return allMessages.reduce((acc, val) => acc.concat(val), []);
    }
}
ConfigValidationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ConfigValidationService, deps: [{ token: i1.LoggerService }], target: i0.ɵɵFactoryTarget.Injectable });
ConfigValidationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ConfigValidationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ConfigValidationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LoggerService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXZhbGlkYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL2NvbmZpZy92YWxpZGF0aW9uL2NvbmZpZy12YWxpZGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBR3ZELE1BQU0sT0FBTyx1QkFBdUI7SUFDbEMsWUFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFBRyxDQUFDO0lBRXBELGVBQWUsQ0FBQyxhQUFvQztRQUNsRCxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLElBQUksRUFBRSxFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVELGNBQWMsQ0FBQyxZQUFpQztRQUM5QyxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVPLHVCQUF1QixDQUFDLGFBQW9DLEVBQUUsYUFBb0I7UUFDeEYsTUFBTSxvQkFBb0IsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUU5RSxJQUFJLGlCQUFpQixHQUFHLENBQUMsQ0FBQztRQUMxQixhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDckMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLHdDQUF3QyxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ3JHLGlCQUFpQixJQUFJLFVBQVUsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8saUJBQWlCLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxZQUFpQyxFQUFFLGFBQW9CO1FBQ3BGLE1BQU0sb0JBQW9CLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFFN0UsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLHdDQUF3QyxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRXJHLE9BQU8sVUFBVSxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU8sd0NBQXdDLENBQUMsb0JBQTRDLEVBQUUsTUFBMkI7UUFDeEgsTUFBTSxXQUFXLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5RSxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDekUsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN0RSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3BGLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRWpGLE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxDQUFDO0lBQ2pDLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxJQUFXLEVBQUUsT0FBK0I7UUFDdkUsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU3RixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7O29IQTdDVSx1QkFBdUI7d0hBQXZCLHVCQUF1QjsyRkFBdkIsdUJBQXVCO2tCQURuQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9nZ2VyU2VydmljZSB9IGZyb20gJy4uLy4uL2xvZ2dpbmcvbG9nZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgT3BlbklkQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uL29wZW5pZC1jb25maWd1cmF0aW9uJztcbmltcG9ydCB7IExldmVsLCBSdWxlVmFsaWRhdGlvblJlc3VsdCB9IGZyb20gJy4vcnVsZSc7XG5pbXBvcnQgeyBhbGxSdWxlcyB9IGZyb20gJy4vcnVsZXMnO1xuaW1wb3J0IHsgYWxsTXVsdGlwbGVDb25maWdSdWxlcyB9IGZyb20gJy4vcnVsZXMvaW5kZXgnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29uZmlnVmFsaWRhdGlvblNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvZ2dlclNlcnZpY2U6IExvZ2dlclNlcnZpY2UpIHt9XG5cbiAgdmFsaWRhdGVDb25maWdzKHBhc3NlZENvbmZpZ3M6IE9wZW5JZENvbmZpZ3VyYXRpb25bXSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlQ29uZmlnc0ludGVybmFsKHBhc3NlZENvbmZpZ3MgPz8gW10sIGFsbE11bHRpcGxlQ29uZmlnUnVsZXMpO1xuICB9XG5cbiAgdmFsaWRhdGVDb25maWcocGFzc2VkQ29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVDb25maWdJbnRlcm5hbChwYXNzZWRDb25maWcsIGFsbFJ1bGVzKTtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVDb25maWdzSW50ZXJuYWwocGFzc2VkQ29uZmlnczogT3BlbklkQ29uZmlndXJhdGlvbltdLCBhbGxSdWxlc1RvVXNlOiBhbnlbXSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGFsbFZhbGlkYXRpb25SZXN1bHRzID0gYWxsUnVsZXNUb1VzZS5tYXAoKHJ1bGUpID0+IHJ1bGUocGFzc2VkQ29uZmlncykpO1xuXG4gICAgbGV0IG92ZXJhbGxFcnJvckNvdW50ID0gMDtcbiAgICBwYXNzZWRDb25maWdzLmZvckVhY2goKHBhc3NlZENvbmZpZykgPT4ge1xuICAgICAgY29uc3QgZXJyb3JDb3VudCA9IHRoaXMucHJvY2Vzc1ZhbGlkYXRpb25SZXN1bHRzQW5kR2V0RXJyb3JDb3VudChhbGxWYWxpZGF0aW9uUmVzdWx0cywgcGFzc2VkQ29uZmlnKTtcbiAgICAgIG92ZXJhbGxFcnJvckNvdW50ICs9IGVycm9yQ291bnQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb3ZlcmFsbEVycm9yQ291bnQgPT09IDA7XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlQ29uZmlnSW50ZXJuYWwocGFzc2VkQ29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uLCBhbGxSdWxlc1RvVXNlOiBhbnlbXSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGFsbFZhbGlkYXRpb25SZXN1bHRzID0gYWxsUnVsZXNUb1VzZS5tYXAoKHJ1bGUpID0+IHJ1bGUocGFzc2VkQ29uZmlnKSk7XG5cbiAgICBjb25zdCBlcnJvckNvdW50ID0gdGhpcy5wcm9jZXNzVmFsaWRhdGlvblJlc3VsdHNBbmRHZXRFcnJvckNvdW50KGFsbFZhbGlkYXRpb25SZXN1bHRzLCBwYXNzZWRDb25maWcpO1xuXG4gICAgcmV0dXJuIGVycm9yQ291bnQgPT09IDA7XG4gIH1cblxuICBwcml2YXRlIHByb2Nlc3NWYWxpZGF0aW9uUmVzdWx0c0FuZEdldEVycm9yQ291bnQoYWxsVmFsaWRhdGlvblJlc3VsdHM6IFJ1bGVWYWxpZGF0aW9uUmVzdWx0W10sIGNvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvbik6IG51bWJlciB7XG4gICAgY29uc3QgYWxsTWVzc2FnZXMgPSBhbGxWYWxpZGF0aW9uUmVzdWx0cy5maWx0ZXIoKHgpID0+IHgubWVzc2FnZXMubGVuZ3RoID4gMCk7XG4gICAgY29uc3QgYWxsRXJyb3JNZXNzYWdlcyA9IHRoaXMuZ2V0QWxsTWVzc2FnZXNPZlR5cGUoJ2Vycm9yJywgYWxsTWVzc2FnZXMpO1xuICAgIGNvbnN0IGFsbFdhcm5pbmdzID0gdGhpcy5nZXRBbGxNZXNzYWdlc09mVHlwZSgnd2FybmluZycsIGFsbE1lc3NhZ2VzKTtcbiAgICBhbGxFcnJvck1lc3NhZ2VzLmZvckVhY2goKG1lc3NhZ2UpID0+IHRoaXMubG9nZ2VyU2VydmljZS5sb2dFcnJvcihjb25maWcsIG1lc3NhZ2UpKTtcbiAgICBhbGxXYXJuaW5ncy5mb3JFYWNoKChtZXNzYWdlKSA9PiB0aGlzLmxvZ2dlclNlcnZpY2UubG9nV2FybmluZyhjb25maWcsIG1lc3NhZ2UpKTtcblxuICAgIHJldHVybiBhbGxFcnJvck1lc3NhZ2VzLmxlbmd0aDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QWxsTWVzc2FnZXNPZlR5cGUodHlwZTogTGV2ZWwsIHJlc3VsdHM6IFJ1bGVWYWxpZGF0aW9uUmVzdWx0W10pOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgYWxsTWVzc2FnZXMgPSByZXN1bHRzLmZpbHRlcigoeCkgPT4geC5sZXZlbCA9PT0gdHlwZSkubWFwKChyZXN1bHQpID0+IHJlc3VsdC5tZXNzYWdlcyk7XG5cbiAgICByZXR1cm4gYWxsTWVzc2FnZXMucmVkdWNlKChhY2MsIHZhbCkgPT4gYWNjLmNvbmNhdCh2YWwpLCBbXSk7XG4gIH1cbn1cbiJdfQ==
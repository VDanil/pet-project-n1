import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../storage/storage-persistence.service";
import * as i2 from "./random/random.service";
import * as i3 from "../logging/logger.service";
export class FlowsDataService {
    constructor(storagePersistenceService, randomService, loggerService) {
        this.storagePersistenceService = storagePersistenceService;
        this.randomService = randomService;
        this.loggerService = loggerService;
    }
    createNonce(configuration) {
        const nonce = this.randomService.createRandom(40, configuration);
        this.loggerService.logDebug(configuration, 'Nonce created. nonce:' + nonce);
        this.setNonce(nonce, configuration);
        return nonce;
    }
    setNonce(nonce, configuration) {
        this.storagePersistenceService.write('authNonce', nonce, configuration);
    }
    getAuthStateControl(configuration) {
        return this.storagePersistenceService.read('authStateControl', configuration);
    }
    setAuthStateControl(authStateControl, configuration) {
        return this.storagePersistenceService.write('authStateControl', authStateControl, configuration);
    }
    getExistingOrCreateAuthStateControl(configuration) {
        let state = this.storagePersistenceService.read('authStateControl', configuration);
        if (!state) {
            state = this.randomService.createRandom(40, configuration);
            this.storagePersistenceService.write('authStateControl', state, configuration);
        }
        return state;
    }
    setSessionState(sessionState, configuration) {
        this.storagePersistenceService.write('session_state', sessionState, configuration);
    }
    resetStorageFlowData(configuration) {
        this.storagePersistenceService.resetStorageFlowData(configuration);
    }
    getCodeVerifier(configuration) {
        return this.storagePersistenceService.read('codeVerifier', configuration);
    }
    createCodeVerifier(configuration) {
        const codeVerifier = this.randomService.createRandom(67, configuration);
        this.storagePersistenceService.write('codeVerifier', codeVerifier, configuration);
        return codeVerifier;
    }
    isCodeFlowInProgress(configuration) {
        const storageObject = this.getCodeFlowInProgressStorageEntry(configuration);
        if (!storageObject) {
            return false;
        }
        return storageObject.state === 'in progress';
    }
    setCodeFlowInProgress(configuration) {
        const storageObject = {
            state: 'in progress',
        };
        this.storagePersistenceService.write('storageCodeFlowInProgress', JSON.stringify(storageObject), configuration);
    }
    resetCodeFlowInProgress(configuration) {
        this.storagePersistenceService.write('storageCodeFlowInProgress', '', configuration);
    }
    getCodeFlowInProgressStorageEntry(configuration) {
        const storageEntry = this.storagePersistenceService.read('storageCodeFlowInProgress', configuration);
        if (!storageEntry) {
            return null;
        }
        return JSON.parse(storageEntry);
    }
    isSilentRenewRunning(configuration) {
        const { configId, silentRenewTimeoutInSeconds } = configuration;
        const storageObject = this.getSilentRenewRunningStorageEntry(configuration);
        if (!storageObject) {
            return false;
        }
        const timeOutInMilliseconds = silentRenewTimeoutInSeconds * 1000;
        const dateOfLaunchedProcessUtc = Date.parse(storageObject.dateOfLaunchedProcessUtc);
        const currentDateUtc = Date.parse(new Date().toISOString());
        const elapsedTimeInMilliseconds = Math.abs(currentDateUtc - dateOfLaunchedProcessUtc);
        const isProbablyStuck = elapsedTimeInMilliseconds > timeOutInMilliseconds;
        if (isProbablyStuck) {
            this.loggerService.logDebug(configuration, 'silent renew process is probably stuck, state will be reset.', configId);
            this.resetSilentRenewRunning(configuration);
            return false;
        }
        return storageObject.state === 'running';
    }
    setSilentRenewRunning(configuration) {
        const storageObject = {
            state: 'running',
            dateOfLaunchedProcessUtc: new Date().toISOString(),
        };
        this.storagePersistenceService.write('storageSilentRenewRunning', JSON.stringify(storageObject), configuration);
    }
    resetSilentRenewRunning(configuration) {
        this.storagePersistenceService.write('storageSilentRenewRunning', '', configuration);
    }
    getSilentRenewRunningStorageEntry(configuration) {
        const storageEntry = this.storagePersistenceService.read('storageSilentRenewRunning', configuration);
        if (!storageEntry) {
            return null;
        }
        return JSON.parse(storageEntry);
    }
}
FlowsDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: FlowsDataService, deps: [{ token: i1.StoragePersistenceService }, { token: i2.RandomService }, { token: i3.LoggerService }], target: i0.ɵɵFactoryTarget.Injectable });
FlowsDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: FlowsDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: FlowsDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.StoragePersistenceService }, { type: i2.RandomService }, { type: i3.LoggerService }]; } });
//# sourceMappingURL=data:application/json;base64,
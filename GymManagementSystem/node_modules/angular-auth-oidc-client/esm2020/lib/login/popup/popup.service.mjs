import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class PopUpService {
    constructor(document) {
        this.document = document;
        this.STORAGE_IDENTIFIER = 'popupauth';
        this.resultInternal$ = new Subject();
    }
    get result$() {
        return this.resultInternal$.asObservable();
    }
    get windowInternal() {
        return this.document.defaultView;
    }
    isCurrentlyInPopup() {
        if (this.canAccessSessionStorage()) {
            const popup = sessionStorage.getItem(this.STORAGE_IDENTIFIER);
            return !!this.windowInternal.opener && this.windowInternal.opener !== this.windowInternal && !!popup;
        }
        return false;
    }
    openPopUp(url, popupOptions) {
        const optionsToPass = this.getOptions(popupOptions);
        this.popUp = this.windowInternal.open(url, '_blank', optionsToPass);
        this.popUp.sessionStorage.setItem(this.STORAGE_IDENTIFIER, 'true');
        const listener = (event) => {
            if (!event?.data || typeof event.data !== 'string') {
                return;
            }
            this.resultInternal$.next({ userClosed: false, receivedUrl: event.data });
            this.cleanUp(listener);
        };
        this.windowInternal.addEventListener('message', listener, false);
        this.handle = this.windowInternal.setInterval(() => {
            if (this.popUp.closed) {
                this.resultInternal$.next({ userClosed: true });
                this.cleanUp(listener);
            }
        }, 200);
    }
    sendMessageToMainWindow(url) {
        if (this.windowInternal.opener) {
            const href = this.windowInternal.location.href;
            this.sendMessage(url, href);
        }
    }
    cleanUp(listener) {
        this.windowInternal.removeEventListener('message', listener, false);
        this.windowInternal.clearInterval(this.handle);
        if (this.popUp) {
            this.popUp.sessionStorage?.removeItem(this.STORAGE_IDENTIFIER);
            this.popUp.close();
            this.popUp = null;
        }
    }
    sendMessage(url, href) {
        this.windowInternal.opener.postMessage(url, href);
    }
    getOptions(popupOptions) {
        const popupDefaultOptions = { width: 500, height: 500, left: 50, top: 50 };
        const options = { ...popupDefaultOptions, ...(popupOptions || {}) };
        const left = this.windowInternal.screenLeft + (this.windowInternal.outerWidth - options.width) / 2;
        const top = this.windowInternal.screenTop + (this.windowInternal.outerHeight - options.height) / 2;
        options.left = left;
        options.top = top;
        return Object.entries(options)
            .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
            .join(',');
    }
    canAccessSessionStorage() {
        return typeof navigator !== 'undefined' && navigator.cookieEnabled && typeof Storage !== 'undefined';
    }
}
PopUpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: PopUpService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
PopUpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: PopUpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: PopUpService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,
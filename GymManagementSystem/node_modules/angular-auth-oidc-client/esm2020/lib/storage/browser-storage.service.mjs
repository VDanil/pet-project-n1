import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../logging/logger.service";
import * as i2 from "./abstract-security-storage";
export class BrowserStorageService {
    constructor(loggerService, abstractSecurityStorage) {
        this.loggerService = loggerService;
        this.abstractSecurityStorage = abstractSecurityStorage;
    }
    read(key, configuration) {
        const { configId } = configuration;
        if (!this.hasStorage()) {
            this.loggerService.logDebug(configuration, `Wanted to read '${key}' but Storage was undefined`);
            return null;
        }
        const storedConfig = this.abstractSecurityStorage.read(configId);
        if (!storedConfig) {
            return null;
        }
        return JSON.parse(storedConfig);
    }
    write(value, configuration) {
        const { configId } = configuration;
        if (!this.hasStorage()) {
            this.loggerService.logDebug(configuration, `Wanted to write '${value}' but Storage was falsy`);
            return false;
        }
        value = value || null;
        this.abstractSecurityStorage.write(configId, JSON.stringify(value));
        return true;
    }
    remove(key, configuration) {
        if (!this.hasStorage()) {
            this.loggerService.logDebug(configuration, `Wanted to remove '${key}' but Storage was falsy`);
            return false;
        }
        // const storage = this.getStorage(configuration);
        // if (!storage) {
        //   this.loggerService.logDebug(configuration, `Wanted to write '${key}' but Storage was falsy`);
        //   return false;
        // }
        this.abstractSecurityStorage.remove(key);
        return true;
    }
    // TODO THIS STORAGE WANTS AN ID BUT CLEARS EVERYTHING
    clear(configuration) {
        if (!this.hasStorage()) {
            this.loggerService.logDebug(configuration, `Wanted to clear storage but Storage was falsy`);
            return false;
        }
        // const storage = this.getStorage(configuration);
        // if (!storage) {
        //   this.loggerService.logDebug(configuration, `Wanted to clear storage but Storage was falsy`);
        //   return false;
        // }
        this.abstractSecurityStorage.clear();
        return true;
    }
    hasStorage() {
        return typeof Storage !== 'undefined';
    }
}
BrowserStorageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: BrowserStorageService, deps: [{ token: i1.LoggerService }, { token: i2.AbstractSecurityStorage }], target: i0.ɵɵFactoryTarget.Injectable });
BrowserStorageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: BrowserStorageService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: BrowserStorageService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LoggerService }, { type: i2.AbstractSecurityStorage }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci1zdG9yYWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWF1dGgtb2lkYy1jbGllbnQvc3JjL2xpYi9zdG9yYWdlL2Jyb3dzZXItc3RvcmFnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFNM0MsTUFBTSxPQUFPLHFCQUFxQjtJQUNoQyxZQUFvQixhQUE0QixFQUFVLHVCQUFnRDtRQUF0RixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUFVLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7SUFBRyxDQUFDO0lBRTlHLElBQUksQ0FBQyxHQUFXLEVBQUUsYUFBa0M7UUFDbEQsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLGFBQWEsQ0FBQztRQUVuQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxtQkFBbUIsR0FBRyw2QkFBNkIsQ0FBQyxDQUFDO1lBRWhHLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWpFLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQVUsRUFBRSxhQUFrQztRQUNsRCxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsYUFBYSxDQUFDO1FBRW5DLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLG9CQUFvQixLQUFLLHlCQUF5QixDQUFDLENBQUM7WUFFL0YsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELEtBQUssR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDO1FBRXRCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUVwRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBVyxFQUFFLGFBQWtDO1FBQ3BELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLHFCQUFxQixHQUFHLHlCQUF5QixDQUFDLENBQUM7WUFFOUYsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELGtEQUFrRDtRQUNsRCxrQkFBa0I7UUFDbEIsa0dBQWtHO1FBRWxHLGtCQUFrQjtRQUNsQixJQUFJO1FBRUosSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV6QyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxzREFBc0Q7SUFDdEQsS0FBSyxDQUFDLGFBQWtDO1FBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLCtDQUErQyxDQUFDLENBQUM7WUFFNUYsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELGtEQUFrRDtRQUNsRCxrQkFBa0I7UUFDbEIsaUdBQWlHO1FBRWpHLGtCQUFrQjtRQUNsQixJQUFJO1FBRUosSUFBSSxDQUFDLHVCQUF1QixDQUFDLEtBQUssRUFBRSxDQUFDO1FBRXJDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVPLFVBQVU7UUFDaEIsT0FBTyxPQUFPLE9BQU8sS0FBSyxXQUFXLENBQUM7SUFDeEMsQ0FBQzs7a0hBOUVVLHFCQUFxQjtzSEFBckIscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBRGpDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9wZW5JZENvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9jb25maWcvb3BlbmlkLWNvbmZpZ3VyYXRpb24nO1xyXG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vbG9nZ2luZy9sb2dnZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IEFic3RyYWN0U2VjdXJpdHlTdG9yYWdlIH0gZnJvbSAnLi9hYnN0cmFjdC1zZWN1cml0eS1zdG9yYWdlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJyb3dzZXJTdG9yYWdlU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2dnZXJTZXJ2aWNlOiBMb2dnZXJTZXJ2aWNlLCBwcml2YXRlIGFic3RyYWN0U2VjdXJpdHlTdG9yYWdlOiBBYnN0cmFjdFNlY3VyaXR5U3RvcmFnZSkge31cclxuXHJcbiAgcmVhZChrZXk6IHN0cmluZywgY29uZmlndXJhdGlvbjogT3BlbklkQ29uZmlndXJhdGlvbik6IGFueSB7XHJcbiAgICBjb25zdCB7IGNvbmZpZ0lkIH0gPSBjb25maWd1cmF0aW9uO1xyXG5cclxuICAgIGlmICghdGhpcy5oYXNTdG9yYWdlKCkpIHtcclxuICAgICAgdGhpcy5sb2dnZXJTZXJ2aWNlLmxvZ0RlYnVnKGNvbmZpZ3VyYXRpb24sIGBXYW50ZWQgdG8gcmVhZCAnJHtrZXl9JyBidXQgU3RvcmFnZSB3YXMgdW5kZWZpbmVkYCk7XHJcblxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdG9yZWRDb25maWcgPSB0aGlzLmFic3RyYWN0U2VjdXJpdHlTdG9yYWdlLnJlYWQoY29uZmlnSWQpO1xyXG5cclxuICAgIGlmICghc3RvcmVkQ29uZmlnKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBKU09OLnBhcnNlKHN0b3JlZENvbmZpZyk7XHJcbiAgfVxyXG5cclxuICB3cml0ZSh2YWx1ZTogYW55LCBjb25maWd1cmF0aW9uOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCB7IGNvbmZpZ0lkIH0gPSBjb25maWd1cmF0aW9uO1xyXG5cclxuICAgIGlmICghdGhpcy5oYXNTdG9yYWdlKCkpIHtcclxuICAgICAgdGhpcy5sb2dnZXJTZXJ2aWNlLmxvZ0RlYnVnKGNvbmZpZ3VyYXRpb24sIGBXYW50ZWQgdG8gd3JpdGUgJyR7dmFsdWV9JyBidXQgU3RvcmFnZSB3YXMgZmFsc3lgKTtcclxuXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICB2YWx1ZSA9IHZhbHVlIHx8IG51bGw7XHJcblxyXG4gICAgdGhpcy5hYnN0cmFjdFNlY3VyaXR5U3RvcmFnZS53cml0ZShjb25maWdJZCwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHJlbW92ZShrZXk6IHN0cmluZywgY29uZmlndXJhdGlvbjogT3BlbklkQ29uZmlndXJhdGlvbik6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCF0aGlzLmhhc1N0b3JhZ2UoKSkge1xyXG4gICAgICB0aGlzLmxvZ2dlclNlcnZpY2UubG9nRGVidWcoY29uZmlndXJhdGlvbiwgYFdhbnRlZCB0byByZW1vdmUgJyR7a2V5fScgYnV0IFN0b3JhZ2Ugd2FzIGZhbHN5YCk7XHJcblxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc3Qgc3RvcmFnZSA9IHRoaXMuZ2V0U3RvcmFnZShjb25maWd1cmF0aW9uKTtcclxuICAgIC8vIGlmICghc3RvcmFnZSkge1xyXG4gICAgLy8gICB0aGlzLmxvZ2dlclNlcnZpY2UubG9nRGVidWcoY29uZmlndXJhdGlvbiwgYFdhbnRlZCB0byB3cml0ZSAnJHtrZXl9JyBidXQgU3RvcmFnZSB3YXMgZmFsc3lgKTtcclxuXHJcbiAgICAvLyAgIHJldHVybiBmYWxzZTtcclxuICAgIC8vIH1cclxuXHJcbiAgICB0aGlzLmFic3RyYWN0U2VjdXJpdHlTdG9yYWdlLnJlbW92ZShrZXkpO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLy8gVE9ETyBUSElTIFNUT1JBR0UgV0FOVFMgQU4gSUQgQlVUIENMRUFSUyBFVkVSWVRISU5HXHJcbiAgY2xlYXIoY29uZmlndXJhdGlvbjogT3BlbklkQ29uZmlndXJhdGlvbik6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCF0aGlzLmhhc1N0b3JhZ2UoKSkge1xyXG4gICAgICB0aGlzLmxvZ2dlclNlcnZpY2UubG9nRGVidWcoY29uZmlndXJhdGlvbiwgYFdhbnRlZCB0byBjbGVhciBzdG9yYWdlIGJ1dCBTdG9yYWdlIHdhcyBmYWxzeWApO1xyXG5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnN0IHN0b3JhZ2UgPSB0aGlzLmdldFN0b3JhZ2UoY29uZmlndXJhdGlvbik7XHJcbiAgICAvLyBpZiAoIXN0b3JhZ2UpIHtcclxuICAgIC8vICAgdGhpcy5sb2dnZXJTZXJ2aWNlLmxvZ0RlYnVnKGNvbmZpZ3VyYXRpb24sIGBXYW50ZWQgdG8gY2xlYXIgc3RvcmFnZSBidXQgU3RvcmFnZSB3YXMgZmFsc3lgKTtcclxuXHJcbiAgICAvLyAgIHJldHVybiBmYWxzZTtcclxuICAgIC8vIH1cclxuXHJcbiAgICB0aGlzLmFic3RyYWN0U2VjdXJpdHlTdG9yYWdlLmNsZWFyKCk7XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhc1N0b3JhZ2UoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdHlwZW9mIFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnO1xyXG4gIH1cclxufVxyXG4iXX0=
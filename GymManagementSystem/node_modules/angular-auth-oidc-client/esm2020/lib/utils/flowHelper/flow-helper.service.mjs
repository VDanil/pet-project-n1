import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class FlowHelper {
    isCurrentFlowCodeFlow(configuration) {
        return this.currentFlowIs('code', configuration);
    }
    isCurrentFlowAnyImplicitFlow(configuration) {
        return this.isCurrentFlowImplicitFlowWithAccessToken(configuration) || this.isCurrentFlowImplicitFlowWithoutAccessToken(configuration);
    }
    isCurrentFlowCodeFlowWithRefreshTokens(configuration) {
        const { useRefreshToken } = configuration;
        if (this.isCurrentFlowCodeFlow(configuration) && useRefreshToken) {
            return true;
        }
        return false;
    }
    isCurrentFlowImplicitFlowWithAccessToken(configuration) {
        return this.currentFlowIs('id_token token', configuration);
    }
    currentFlowIs(flowTypes, configuration) {
        const { responseType } = configuration;
        if (Array.isArray(flowTypes)) {
            return flowTypes.some((x) => responseType === x);
        }
        return responseType === flowTypes;
    }
    isCurrentFlowImplicitFlowWithoutAccessToken(configuration) {
        return this.currentFlowIs('id_token', configuration);
    }
}
FlowHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: FlowHelper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
FlowHelper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: FlowHelper });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: FlowHelper, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvdy1oZWxwZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL3V0aWxzL2Zsb3dIZWxwZXIvZmxvdy1oZWxwZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUkzQyxNQUFNLE9BQU8sVUFBVTtJQUNyQixxQkFBcUIsQ0FBQyxhQUFrQztRQUN0RCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCw0QkFBNEIsQ0FBQyxhQUFrQztRQUM3RCxPQUFPLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJLENBQUMsMkNBQTJDLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDekksQ0FBQztJQUVELHNDQUFzQyxDQUFDLGFBQWtDO1FBQ3ZFLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxhQUFhLENBQUM7UUFDMUMsSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsYUFBYSxDQUFDLElBQUksZUFBZSxFQUFFO1lBQ2hFLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCx3Q0FBd0MsQ0FBQyxhQUFrQztRQUN6RSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELGFBQWEsQ0FBQyxTQUE0QixFQUFFLGFBQWtDO1FBQzVFLE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxhQUFhLENBQUM7UUFFdkMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzVCLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ2xEO1FBRUQsT0FBTyxZQUFZLEtBQUssU0FBUyxDQUFDO0lBQ3BDLENBQUM7SUFFTywyQ0FBMkMsQ0FBQyxhQUFrQztRQUNwRixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7O3VHQWxDVSxVQUFVOzJHQUFWLFVBQVU7MkZBQVYsVUFBVTtrQkFEdEIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9wZW5JZENvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi8uLi9jb25maWcvb3BlbmlkLWNvbmZpZ3VyYXRpb24nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRmxvd0hlbHBlciB7XG4gIGlzQ3VycmVudEZsb3dDb2RlRmxvdyhjb25maWd1cmF0aW9uOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEZsb3dJcygnY29kZScsIGNvbmZpZ3VyYXRpb24pO1xuICB9XG5cbiAgaXNDdXJyZW50Rmxvd0FueUltcGxpY2l0Rmxvdyhjb25maWd1cmF0aW9uOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNDdXJyZW50Rmxvd0ltcGxpY2l0Rmxvd1dpdGhBY2Nlc3NUb2tlbihjb25maWd1cmF0aW9uKSB8fCB0aGlzLmlzQ3VycmVudEZsb3dJbXBsaWNpdEZsb3dXaXRob3V0QWNjZXNzVG9rZW4oY29uZmlndXJhdGlvbik7XG4gIH1cblxuICBpc0N1cnJlbnRGbG93Q29kZUZsb3dXaXRoUmVmcmVzaFRva2Vucyhjb25maWd1cmF0aW9uOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyB1c2VSZWZyZXNoVG9rZW4gfSA9IGNvbmZpZ3VyYXRpb247XG4gICAgaWYgKHRoaXMuaXNDdXJyZW50Rmxvd0NvZGVGbG93KGNvbmZpZ3VyYXRpb24pICYmIHVzZVJlZnJlc2hUb2tlbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaXNDdXJyZW50Rmxvd0ltcGxpY2l0Rmxvd1dpdGhBY2Nlc3NUb2tlbihjb25maWd1cmF0aW9uOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEZsb3dJcygnaWRfdG9rZW4gdG9rZW4nLCBjb25maWd1cmF0aW9uKTtcbiAgfVxuXG4gIGN1cnJlbnRGbG93SXMoZmxvd1R5cGVzOiBzdHJpbmdbXSB8IHN0cmluZywgY29uZmlndXJhdGlvbjogT3BlbklkQ29uZmlndXJhdGlvbik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgcmVzcG9uc2VUeXBlIH0gPSBjb25maWd1cmF0aW9uO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmxvd1R5cGVzKSkge1xuICAgICAgcmV0dXJuIGZsb3dUeXBlcy5zb21lKCh4KSA9PiByZXNwb25zZVR5cGUgPT09IHgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZVR5cGUgPT09IGZsb3dUeXBlcztcbiAgfVxuXG4gIHByaXZhdGUgaXNDdXJyZW50Rmxvd0ltcGxpY2l0Rmxvd1dpdGhvdXRBY2Nlc3NUb2tlbihjb25maWd1cmF0aW9uOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEZsb3dJcygnaWRfdG9rZW4nLCBjb25maWd1cmF0aW9uKTtcbiAgfVxufVxuIl19